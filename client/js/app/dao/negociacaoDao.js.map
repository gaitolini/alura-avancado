{"version":3,"sources":["../../app-es6/dao/negociacaoDao.js"],"names":["NegociacaoDao","connection","_connection","_store","negociacao","Promise","resolve","reject","request","transaction","objectStore","add","onsuccess","e","onerror","console","log","target","error","cursor","openCursor","negociacoes","atual","result","dado","value","push","Negociacao","_data","_quantidade","_valor","continue","clear"],"mappings":";;;;;;IAAMA,a;AAEF,2BAAYC,UAAZ,EAAwB;AAAA;;AAEpB,aAAKC,WAAL,GAAmBD,UAAnB;AACA,aAAKE,MAAL,GAAc,aAAd;AACH;;;;iCAEQC,U,EAAY;AAAA;;AAEjB,mBAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;;AAEpC,oBAAIC,UAAU,MACTN,WADS,CAETO,WAFS,CAEG,CAAC,MAAKN,MAAN,CAFH,EAEkB,WAFlB,EAGTO,WAHS,CAGG,MAAKP,MAHR,EAITQ,GAJS,CAILP,UAJK,CAAd;;AAMAI,wBAAQI,SAAR,GAAoB,UAACC,CAAD,EAAO;AACvBP;AACH,iBAFD;;AAIAE,wBAAQM,OAAR,GAAkB,aAAK;AACnBC,4BAAQC,GAAR,CAAYH,EAAEI,MAAF,CAASC,KAAT,EAAZ;AACAX,2BAAO,yCAAP;AACH,iBAHD;AAKH,aAjBM,CAAP;AAmBH;;;8BAEKH,U,EAAY;AAAA;;AAEd,mBAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;;AAEpC,oBAAIC,UAAU,OACTN,WADS,CAETO,WAFS,CAEG,CAAC,OAAKN,MAAN,CAFH,EAEkB,WAFlB,EAGTO,WAHS,CAGG,OAAKP,MAHR,EAITQ,GAJS,CAILP,UAJK,CAAd;;AAMAI,wBAAQI,SAAR,GAAoB,UAACC,CAAD,EAAO;AACvBP;AACH,iBAFD;;AAIAE,wBAAQM,OAAR,GAAkB,aAAK;AACnBC,4BAAQC,GAAR,CAAYH,EAAEI,MAAF,CAASC,KAAT,EAAZ;AACAX,2BAAO,yCAAP;AACH,iBAHD;AAKH,aAjBM,CAAP;AAkBH;;;qCAEY;AAAA;;AACT,mBAAO,IAAIF,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;;AAEpC,oBAAIY,SAAS,OAAKjB,WAAL,CACRO,WADQ,CACI,CAAC,OAAKN,MAAN,CADJ,EACmB,WADnB,EAERO,WAFQ,CAEI,OAAKP,MAFT,EAGRiB,UAHQ,EAAb;;AAKA,oBAAIC,cAAc,EAAlB;;AAEAF,uBAAOP,SAAP,GAAmB,aAAK;AACpB,wBAAIU,QAAQT,EAAEI,MAAF,CAASM,MAArB;;AAEA,wBAAID,KAAJ,EAAW;AACP,4BAAIE,OAAOF,MAAMG,KAAjB;AACAJ,oCAAYK,IAAZ,CAAiB,IAAIC,UAAJ,CAAeH,KAAKI,KAApB,EAA2BJ,KAAKK,WAAhC,EAA6CL,KAAKM,MAAlD,CAAjB;;AAEAR,8BAAMS,QAAN;AACH,qBALD,MAKO;AACHzB,gCAAQe,WAAR;AACH;AACJ,iBAXD;;AAaAF,uBAAOL,OAAP,GAAiB,aAAK;AAClBC,4BAAQC,GAAR,CAAYH,EAAEI,MAAF,CAASC,KAArB;AACAX,2BAAO,wCAAP;AACH,iBAHD;AAKH,aA3BM,CAAP;AA4BH;;;qCAEY;AAAA;;AACT,mBAAO,IAAIF,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;;AAEpC,oBAAIY,SAAS,OAAKjB,WAAL,CACRO,WADQ,CACI,CAAC,OAAKN,MAAN,CADJ,EACmB,WADnB,EAERO,WAFQ,CAEI,OAAKP,MAFT,EAGR6B,KAHQ,EAAb;;AAKAb,uBAAOP,SAAP,GAAmB,aAAK;AACpBN,4BAAQ,qBAAR;AACH,iBAFD;;AAIAa,uBAAOL,OAAP,GAAiB,aAAK;AAClBC,4BAAQC,GAAR,CAAYH,EAAEI,MAAF,CAASC,KAArB;AACAX,2BAAO,wCAAP;AACH,iBAHD;AAKH,aAhBM,CAAP;AAiBH","file":"negociacaoDao.js","sourcesContent":["class NegociacaoDao {\r\n\r\n    constructor(connection) {\r\n\r\n        this._connection = connection;\r\n        this._store = 'negociacoes';\r\n    }\r\n\r\n    adiciona(negociacao) {\r\n\r\n        return new Promise((resolve, reject) => {\r\n\r\n            let request = this\r\n                ._connection\r\n                .transaction([this._store], 'readwrite')\r\n                .objectStore(this._store)\r\n                .add(negociacao);\r\n\r\n            request.onsuccess = (e) => {\r\n                resolve();\r\n            };\r\n\r\n            request.onerror = e => {\r\n                console.log(e.target.error());\r\n                reject('Não foi possível adicionar a negociação');\r\n            };\r\n\r\n        });\r\n\r\n    }\r\n\r\n    apaga(negociacao) {\r\n\r\n        return new Promise((resolve, reject) => {\r\n\r\n            let request = this\r\n                ._connection\r\n                .transaction([this._store], 'readwrite')\r\n                .objectStore(this._store)\r\n                .add(negociacao);\r\n\r\n            request.onsuccess = (e) => {\r\n                resolve();\r\n            };\r\n\r\n            request.onerror = e => {\r\n                console.log(e.target.error());\r\n                reject('Não foi possível adicionar a negociação');\r\n            };\r\n\r\n        });\r\n    }\r\n\r\n    listaTodos() {\r\n        return new Promise((resolve, reject) => {\r\n\r\n            let cursor = this._connection\r\n                .transaction([this._store], 'readwrite')\r\n                .objectStore(this._store)\r\n                .openCursor();\r\n\r\n            let negociacoes = [];\r\n\r\n            cursor.onsuccess = e => {\r\n                let atual = e.target.result;\r\n\r\n                if (atual) {\r\n                    let dado = atual.value;\r\n                    negociacoes.push(new Negociacao(dado._data, dado._quantidade, dado._valor));\r\n\r\n                    atual.continue();\r\n                } else {\r\n                    resolve(negociacoes);\r\n                }\r\n            }\r\n\r\n            cursor.onerror = e => {\r\n                console.log(e.target.error);\r\n                reject('Não foi possivel listar as negociações');\r\n            }\r\n\r\n        })\r\n    }\r\n\r\n    apagaTodos() {\r\n        return new Promise((resolve, reject) => {\r\n\r\n            let cursor = this._connection\r\n                .transaction([this._store], 'readwrite')\r\n                .objectStore(this._store)\r\n                .clear();\r\n\r\n            cursor.onsuccess = e => {\r\n                resolve('Apagado com sucesso');\r\n            }\r\n\r\n            cursor.onerror = e => {\r\n                console.log(e.target.error);\r\n                reject('Não foi possivel apagar as negociações');\r\n            }\r\n\r\n        })\r\n    }\r\n}"]}