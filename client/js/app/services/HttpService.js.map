{"version":3,"sources":["../../app-es6/services/HttpService.js"],"names":["HttpService","res","ok","Error","statusText","url","fetch","then","_handleErrors","json","dado","headers","method","body","JSON","stringify"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;mCAAaA,W;;;;;;;kDAgBKC,G,EAAK;AACf,4BAAI,CAACA,IAAIC,EAAT,EAAa,MAAM,IAAIC,KAAJ,CAAUF,IAAIG,UAAd,CAAN;AACb,+BAAOH,GAAP;AACH;;;wCAEGI,G,EAAK;AAAA;;AAEL,+BAAOC,MAAMD,GAAN,EACFE,IADE,CACG;AAAA,mCAAO,MAAKC,aAAL,CAAmBP,GAAnB,CAAP;AAAA,yBADH,EAEFM,IAFE,CAEG;AAAA,mCAAON,IAAIQ,IAAJ,EAAP;AAAA,yBAFH,CAAP;AAGH;;;yCAEIJ,G,EAAKK,I,EAAM;AAAA;;AAEZ,+BAAOJ,MAAMD,GAAN,EAAW;AACVM,qCAAS,EAAE,gBAAgB,kBAAlB,EADC;AAEVC,oCAAQ,MAFE;AAGVC,kCAAMC,KAAKC,SAAL,CAAeL,IAAf;AAHI,yBAAX,EAKFH,IALE,CAKG;AAAA,mCAAO,OAAKC,aAAL,CAAmBP,GAAnB,CAAP;AAAA,yBALH,CAAP;AAMH","file":"HttpService.js","sourcesContent":["export class HttpService {\r\n\r\n    // Continuaremos com as melhorias no código e a seguir, \r\n    // veremos algo mais avançado.Nós criamos a classe HttpService, \r\n    // depois, escondemos a complexidade de trabalhar com o XMLHttpRequest().\r\n    // Nós fizemos método get e post devolverem uma Promise, e assim, \r\n    // escondemos a complexidade de trabalhar com tal objeto.\r\n\r\n    // Estamos usando o ECMAScript 2015.\r\n    //  Não usamos mais o termo \"ES 6\", \r\n    //  porque a cada ano, \r\n    //  o JavaScript ganha novos recursos.No ES 2016, \r\n    //  foi incluída uma API com o objetivo de simplificar a criação \r\n    //  de requisições Ajax: Fetch API, uma API de busca do JS.O que veremos aqui, \r\n    //  vai além do ECMAScript 2015.\r\n\r\n    _handleErrors(res) {\r\n        if (!res.ok) throw new Error(res.statusText);\r\n        return res;\r\n    }\r\n\r\n    get(url) {\r\n\r\n        return fetch(url)\r\n            .then(res => this._handleErrors(res))\r\n            .then(res => res.json());\r\n    }\r\n\r\n    post(url, dado) {\r\n\r\n        return fetch(url, {\r\n                headers: { 'Content-Type': 'application/json' },\r\n                method: 'post',\r\n                body: JSON.stringify(dado)\r\n            })\r\n            .then(res => this._handleErrors(res));\r\n    }\r\n}"]}