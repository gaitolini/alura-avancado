{"version":3,"sources":["../../app-es6/services/NegociacaoService.js"],"names":["HttpService","ConnectionFactory","NegociacaoDao","Negociacao","NegociacaoService","_http","Promise","resolve","reject","get","then","negociacoes","map","Date","objeto","data","quantidade","valor","catch","console","log","erro","negociacao","post","mensagemOK","listaAtual","all","pullNegociacoesDaSemana","pullNegociacoesDaSemanaAnterior","pullNegociacoesDaSemanaRetrasada","todasNegociacoes","reduce","arrayNegociacao","array","concat","filter","some","JSON","stringify","negociacaoExistente","Error","getConnection","connection","dao","adiciona","listaTodos","apagaTodos"],"mappings":"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","file":"NegociacaoService.js","sourcesContent":["import { HttpService } from './HttpService';\r\nimport { ConnectionFactory } from \"../services/ConnectionFactory\";\r\nimport { NegociacaoDao } from \"../dao/negociacaoDao\";\r\nimport { Negociacao } from \"../models/Negociacao\";\r\n\r\nexport class NegociacaoService {\r\n\r\n    constructor() {\r\n        this._http = new HttpService();\r\n    }\r\n\r\n    pullNegociacoesDaSemanaRetrasada() {\r\n\r\n        return new Promise((resolve, reject) => {\r\n\r\n            this._http.get('/negociacoes/retrasada')\r\n                .then(negociacoes => {\r\n\r\n                    resolve(negociacoes.map(objeto => new Negociacao(new Date(objeto.data), objeto.quantidade, objeto.valor)));\r\n                })\r\n                .catch(erro => {\r\n                    console.log(erro);\r\n                    reject('Não foi possível obter as negociações da semana retrasada.');\r\n\r\n                });\r\n\r\n        });\r\n    }\r\n\r\n    pullNegociacoesDaSemana() {\r\n\r\n        return new Promise((resolve, reject) => {\r\n\r\n            this._http.get('/negociacoes/semana')\r\n                .then(negociacoes => {\r\n                    resolve(negociacoes.map(objeto => new Negociacao(new Date(objeto.data), objeto.quantidade, objeto.valor)));\r\n                })\r\n                .catch(erro => {\r\n                    console.log(erro);\r\n                    reject('Não foi possível obter as negociações da semana.');\r\n                });\r\n        });\r\n\r\n\r\n\r\n\r\n    }\r\n\r\n    pullNegociacoesDaSemanaAnterior() {\r\n\r\n        return new Promise((resolve, reject) => {\r\n\r\n            this._http.get('/negociacoes/anterior')\r\n                .then(negociacoes => {\r\n                    resolve(negociacoes.map(objeto => new Negociacao(new Date(objeto.data), objeto.quantidade, objeto.valor)));\r\n                })\r\n                .catch(erro => {\r\n                    console.log(erro);\r\n                    reject('Não foi possível obter as negociações da semana anterior.');\r\n                });\r\n        });\r\n    }\r\n\r\n    pushNegociacoes(negociacao) {\r\n\r\n        return new Promise((resolve, reject) => {\r\n\r\n            this._http.post('/negociacoes', negociacao)\r\n                .then(mensagemOK => {\r\n                    console.log(mensagemOK);\r\n                    resolve('Negociação enviada para o servidor com sucesso.');\r\n\r\n                }).catch(erro => {\r\n                    console.log(erro);\r\n                    reject('Não foi possivél enviar a negociação para o Servidor');\r\n                });\r\n\r\n        });\r\n\r\n    }\r\n\r\n    obterNegociacoesServer(listaAtual) {\r\n        return Promise.all([\r\n            this.pullNegociacoesDaSemana(),\r\n            this.pullNegociacoesDaSemanaAnterior(),\r\n            this.pullNegociacoesDaSemanaRetrasada()\r\n        ])\r\n            .then(todasNegociacoes =>\r\n                todasNegociacoes\r\n                    .reduce((arrayNegociacao, array) => arrayNegociacao.concat(array), [])\r\n                    .filter(negociacao =>\r\n                        !listaAtual.some(negociacaoExistente =>\r\n                            JSON.stringify(negociacao) == JSON.stringify(negociacaoExistente)))\r\n            )\r\n            .catch(erro => {\r\n                console.log(erro);\r\n                throw new Error('Não foi possível obeter negociações do servidor');\r\n            });\r\n    }\r\n\r\n    cadastra(negociacao) {\r\n\r\n        return ConnectionFactory\r\n            .getConnection()\r\n            .then(connection => new NegociacaoDao(connection))\r\n            .then(dao => dao.adiciona(negociacao))\r\n            .then(() => 'Negociação cadastrada com sucesso!')\r\n            .catch(erro => {\r\n                console.log(erro);\r\n                throw new Error(\"Não foi possível adicionar a negociação.\")\r\n            });\r\n    }\r\n\r\n    lista() {\r\n\r\n        return ConnectionFactory\r\n            .getConnection()\r\n            .then(connection => new NegociacaoDao(connection))\r\n            .then(dao => dao.listaTodos())\r\n            .catch(erro => {\r\n                console.log(erro);\r\n                throw new Error('Não foi possivel carregar as negociaçõeso do BD.')\r\n            });\r\n\r\n    }\r\n\r\n    apaga() {\r\n\r\n        return ConnectionFactory\r\n            .getConnection()\r\n            .then(connection => new NegociacaoDao(connection))\r\n            .then(dao => dao.apagaTodos())\r\n            .then(() => 'Negociações apagada com sucesso!')\r\n            .catch(erro => {\r\n                console.log(erro);\r\n                throw new Error('Não foi possivel apagar as negociaçõeso do BD.')\r\n            });\r\n    }\r\n\r\n}\r\n"]}