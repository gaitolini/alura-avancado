{"version":3,"sources":["../../app-es6/services/ConnectionFactory.js"],"names":["stores","version","nameDB","connection","close","ConnectionFactory","Error","Promise","resolve","reject","openRequest","window","indexedDB","open","onupgradeneeded","console","log","_createStores","e","target","result","onsuccess","bind","onerror","error","name","forEach","objectStoreNames","contains","store","deleteObjectStore","createObjectStore","autoIncrement"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACMA,kB,GAAS,CAAC,aAAD,C;AACTC,mB,GAAU,C;AACVC,kB,GAAS,e;AACXC,sB,GAAa,I;AACbC,iB,GAAQ,I;;yCAECC,iB;AAET,6CAAc;AAAA;;AACV,0BAAM,IAAIC,KAAJ,CAAU,qDAAV,CAAN;AACH;;;;oDAEsB;AACnB,+BAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;;AAEpC,gCAAIC,cAAcC,OAAOC,SAAP,CAAiBC,IAAjB,CAAsBX,MAAtB,EAA8BD,OAA9B,CAAlB;;AAGAS,wCAAYI,eAAZ,GAA8B,aAAK;;AAE/BC,wCAAQC,GAAR,CAAY,iBAAZ;AACAX,kDAAkBY,aAAlB,CAAgCC,EAAEC,MAAF,CAASC,MAAzC;AAEH,6BALD;;AAOAV,wCAAYW,SAAZ,GAAwB,aAAK;;AAEzBN,wCAAQC,GAAR,CAAY,6BAAZ;AACA,oCAAI,CAACb,UAAL,EAAiB;AACbA,iDAAae,EAAEC,MAAF,CAASC,MAAtB;AACAhB,4CAAQD,WAAWC,KAAX,CAAiBkB,IAAjB,CAAsBnB,UAAtB,CAAR;AACAA,+CAAWC,KAAX,GAAmB,YAAY;AAC3B,8CAAM,IAAIE,KAAJ,CAAU,6CAAV,CAAN;AACH,qCAFD;AAIH;AACDE,wCAAQL,UAAR;AACH,6BAZD;;AAcAO,wCAAYa,OAAZ,GAAsB,aAAK;;AAEvBR,wCAAQC,GAAR,CAAYE,EAAEC,MAAF,CAASK,KAAT,EAAZ;AACAf,uCAAOS,EAAEC,MAAF,CAASK,KAAT,CAAeC,IAAtB;AAEH,6BALD;AAOH,yBAjCM,CAAP;AAkCH;;;kDAEoBtB,U,EAAY;;AAE7BH,+BAAO0B,OAAP,CAAe,iBAAS;AACpB,gCAAIvB,WAAWwB,gBAAX,CAA4BC,QAA5B,CAAqCC,KAArC,CAAJ,EACI1B,WAAW2B,iBAAX,CAA6BD,KAA7B;;AAEJ1B,uCAAW4B,iBAAX,CAA6BF,KAA7B,EAAoC,EAAEG,eAAe,IAAjB,EAApC;AACAjB,oCAAQC,GAAR,oBAA6Ba,KAA7B;AACH,yBAND;AAQH;;;sDAEwB;AACrB,4BAAI1B,UAAJ,EAAgB;AACZC,oCADY,CACD;AACXD,yCAAa,IAAb;AACH;AACJ","file":"ConnectionFactory.js","sourcesContent":["\r\nconst stores = ['negociacoes'];\r\nconst version = 3;\r\nconst nameDB = 'negociacoesDB';\r\nlet connection = null;\r\nlet close = null;\r\n\r\nexport class ConnectionFactory {\r\n\r\n    constructor() {\r\n        throw new Error('Não é possível criar instacias de ConnectionFactory');\r\n    }\r\n\r\n    static getConnection() {\r\n        return new Promise((resolve, reject) => {\r\n\r\n            let openRequest = window.indexedDB.open(nameDB, version);\r\n\r\n\r\n            openRequest.onupgradeneeded = e => {\r\n\r\n                console.log('onupgradeneeded');\r\n                ConnectionFactory._createStores(e.target.result);\r\n\r\n            }\r\n\r\n            openRequest.onsuccess = e => {\r\n\r\n                console.log('Conexao obitida com sucesso');\r\n                if (!connection) {\r\n                    connection = e.target.result;\r\n                    close = connection.close.bind(connection);\r\n                    connection.close = function () {\r\n                        throw new Error('Você não pode fechar diretamente a conexão!');\r\n                    }\r\n\r\n                }\r\n                resolve(connection);\r\n            }\r\n\r\n            openRequest.onerror = e => {\r\n\r\n                console.log(e.target.error());\r\n                reject(e.target.error.name);\r\n\r\n            }\r\n\r\n        });\r\n    }\r\n\r\n    static _createStores(connection) {\r\n\r\n        stores.forEach(store => {\r\n            if (connection.objectStoreNames.contains(store))\r\n                connection.deleteObjectStore(store);\r\n\r\n            connection.createObjectStore(store, { autoIncrement: true });\r\n            console.log(`_createStores(${store})`);\r\n        });\r\n\r\n    }\r\n\r\n    static closeConnection() {\r\n        if (connection) {\r\n            close();   // Reflect.apply(close, connection,[]); //Outra forma de associar o close a connection sem o Bind\r\n            connection = null;\r\n        }\r\n    }\r\n}\r\n\r\n"]}